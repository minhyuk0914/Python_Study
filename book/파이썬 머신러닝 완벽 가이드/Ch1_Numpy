{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3f269963",
   "metadata": {},
   "source": [
    "# 넘파이 ndarray 개요 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9cf00f41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# numpy 모듈 임포트, as np -> 약자는 np\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0878cabb",
   "metadata": {},
   "source": [
    "##### Numpy 기반 데이터 타입: ndarray  \n",
    "##### ndarray.shape : ndarray의 차원과 크기를 튜플(tuple) 형태로 나타냄  \n",
    "##### ndarray.ndim : ndaaray의 차원을 나타냄"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d754a591",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1 type: <class 'numpy.ndarray'>\n",
      "array1 array 형태: (3,)\n",
      "array1 차원:  1\n",
      "array2 type: <class 'numpy.ndarray'>\n",
      "array2 array 형태: (2, 3)\n",
      "array2 차원:  2\n",
      "array3 type: <class 'numpy.ndarray'>\n",
      "array3 array 형태: (1, 3)\n",
      "array3 차원:  2\n"
     ]
    }
   ],
   "source": [
    "array1 = np.array([1, 2, 3])\n",
    "print('array1 type:', type(array1))\n",
    "print('array1 array 형태:', array1.shape)\n",
    "print('array1 차원: ', array1.ndim)\n",
    "\n",
    "array2 = np.array([[1, 2, 3],\n",
    "                   [2, 3, 4]])\n",
    "print('array2 type:', type(array2))\n",
    "print('array2 array 형태:', array2.shape)\n",
    "print('array2 차원: ', array2.ndim)\n",
    "\n",
    "array3 = np.array([[1, 2, 3]])\n",
    "print('array3 type:', type(array3))\n",
    "print('array3 array 형태:', array3.shape)\n",
    "print('array3 차원: ', array3.ndim)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efe7d5c9",
   "metadata": {},
   "source": [
    "* ex1) (3, ) -> 1차원 array, 3개의 데이터  \n",
    "* ex2) (2, 3) -> 2차원 array, 2개의 행(로우), 3개의 열(컬럼) / 2 * 3 = 6개의 데이터  \n",
    "* ex3) (1, 3) -> 2차원 array, 1개의 행(로우), 3개의 열(컬럼) / 1 * 3 = 3개의 데이터  \n",
    "* ex4) (3, ) != (1, 3) / 데이터 수는 같지만, 차원의 크기가 다르다.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbfaa4b8",
   "metadata": {},
   "source": [
    "# ndarray의 데이터 타입"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d2f05d7",
   "metadata": {},
   "source": [
    "##### ndarray내의 데이터 값은 숫자 값, 문자열 값, 불 값 등 모두 가능\n",
    "##### ndarray내의 데이터 타입은 같은 데이터 타입만 가능\n",
    "##### ndarray내의 데이터 타입은 dtype 속성으로 확인 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fd25c303",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n",
      "<class 'numpy.ndarray'>\n",
      "[1 2 3] int32\n"
     ]
    }
   ],
   "source": [
    "list1 = [1, 2, 3]\n",
    "print(type(list1))\n",
    "array1 = np.array(list1)\n",
    "print(type(array1))\n",
    "print(array1, array1.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "21e56c89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1' '2' 'string'] <U11\n",
      "[1.  2.  3.3] float64\n"
     ]
    }
   ],
   "source": [
    "list2 = [1, 2, 'string']\n",
    "array2 = np.array(list2)\n",
    "print(array2, array2.dtype)\n",
    "\n",
    "list3 = [1, 2, 3.3]\n",
    "array3 = np.array(list3)\n",
    "print(array3, array3.dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1b8fd1d",
   "metadata": {},
   "source": [
    "* list2에서 'string'을 포함하고 있기에, 유니코드 문자열 값 <U11 로 변환\n",
    "* list3에서 정수 1, 2는 3.3인 실수를 포함하고 있기에, 1.2.인 float64로 변환 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c783ed7",
   "metadata": {},
   "source": [
    "##### ndarray  내 데이터 값 타입 변경 astype()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e679c917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 2. 3.] float64\n",
      "[1 2 3] int32\n",
      "[1 2 3] int32\n"
     ]
    }
   ],
   "source": [
    "array_int = np.array([1, 2, 3])\n",
    "array_float = array_int.astype('float64')\n",
    "print(array_float, array_float.dtype)\n",
    "\n",
    "array_int1 = array_float.astype('int32')\n",
    "print(array_int1, array_int1.dtype)\n",
    "\n",
    "array_float1 = np.array([1.1, 2.1, 3.1])\n",
    "array_int2 = array_float1.astype('int32')\n",
    "print(array_int2, array_int2.dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9854d501",
   "metadata": {},
   "source": [
    "# ndarray를 편리하게 생성 - arange, zeros, ones"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d6502e5",
   "metadata": {},
   "source": [
    "##### arange([start,] stop[, step,], dtype=None])\n",
    "##### zeros(shape, dtype=float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "02888d98",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "int32 (10,)\n",
      "[1 3 5 7 9]\n",
      "int32 (5,)\n"
     ]
    }
   ],
   "source": [
    "# 0 <= x < 10\n",
    "sequence_array1 = np.arange(10)\n",
    "print(sequence_array1)\n",
    "print(sequence_array1.dtype, sequence_array1.shape)\n",
    "\n",
    "# 1 <= x < 10, (step = 2) - > 1, 3, 5, 7, 9 \n",
    "sequence_array2 = np.arange(1,10,2)\n",
    "print(sequence_array2)\n",
    "print(sequence_array2.dtype, sequence_array2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9b51faf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0]\n",
      " [0 0]\n",
      " [0 0]]\n",
      "int32 (3, 2)\n",
      "[[1 1]\n",
      " [1 1]\n",
      " [1 1]]\n",
      "int32 (3, 2)\n"
     ]
    }
   ],
   "source": [
    "# (3, 2) 크기인 값이 모두 0인 행렬, dtype은 int32\n",
    "zero_array = np.zeros((3, 2), dtype = 'int32')\n",
    "print(zero_array)\n",
    "print(zero_array.dtype, zero_array.shape)\n",
    "\n",
    "# (3, 2) 크기인 값이 모두 1인 행렬, dtype은 int32\n",
    "one_array = np.ones((3, 2), dtype = 'int32')\n",
    "print(one_array)\n",
    "print(one_array.dtype, one_array.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d413d2b9",
   "metadata": {},
   "source": [
    "# ndarray의 차원과 크기를 변경하는 reshape()\n",
    "##### reshape(shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bf277f9f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1: \n",
      " [0 1 2 3 4 5 6 7 8 9]\n",
      "array2: \n",
      " [[0 1 2 3 4]\n",
      " [5 6 7 8 9]]\n",
      "array3: \n",
      " [[0 1]\n",
      " [2 3]\n",
      " [4 5]\n",
      " [6 7]\n",
      " [8 9]]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(10)\n",
    "print('array1: \\n', array1)\n",
    "\n",
    "array2 = array1.reshape(2, 5)\n",
    "print('array2: \\n', array2)\n",
    "\n",
    "array3 = array1. reshape(5, 2)\n",
    "print('array3: \\n', array3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1feda134",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 10 into shape (4,3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [9]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# array1 은 10개의 데이터를 가지고 있기에\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;66;03m# 12개인 (4, 3)인 형태로는 변경이 불가능\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[43marray1\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreshape\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m4\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mValueError\u001b[0m: cannot reshape array of size 10 into shape (4,3)"
     ]
    }
   ],
   "source": [
    "# array1 은 10개의 데이터를 가지고 있기에\n",
    "# 12개인 (4, 3)인 형태로는 변경이 불가능\n",
    "array1.reshape(4, 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2922ff6",
   "metadata": {},
   "source": [
    "##### reshape() 인자에 -1 값을 넣으면 기존 ndarray와 호환되는 새로운 shape로 반환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0cabbbc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1: \n",
      " [0 1 2 3 4 5 6 7 8 9]\n",
      "array2: \n",
      " [[0 1 2 3 4]\n",
      " [5 6 7 8 9]]\n",
      "array3: \n",
      " [[0 1]\n",
      " [2 3]\n",
      " [4 5]\n",
      " [6 7]\n",
      " [8 9]]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(10)\n",
    "print('array1: \\n', array1)\n",
    "\n",
    "array2 = array1.reshape(-1, 5)\n",
    "print('array2: \\n', array2)\n",
    "\n",
    "array3 = array1. reshape(5, -1)\n",
    "print('array3: \\n', array3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9655b413",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 10 into shape (3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [11]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# -1을 사용해도 호환될 수 없는 형태는 변환 X \u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m array4 \u001b[38;5;241m=\u001b[39m \u001b[43marray1\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreshape\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mValueError\u001b[0m: cannot reshape array of size 10 into shape (3)"
     ]
    }
   ],
   "source": [
    "# -1을 사용해도 호환될 수 없는 형태는 변환 X \n",
    "array4 = array1.reshape(-1, 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e45dc830",
   "metadata": {},
   "source": [
    "##### tolist():  ndarray -> 리스트 자료형으로 변환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "09e95e2a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array3d: \n",
      " [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]\n",
      "array3d:  (2, 2, 2)\n",
      "\n",
      "3차원 -> 2차원\n",
      "array5: \n",
      " [[0], [1], [2], [3], [4], [5], [6], [7]]\n",
      "array5 shape: (8, 1)\n",
      "\n",
      "1차원 -> 2차원\n",
      "array6: \n",
      " [[0], [1], [2], [3], [4], [5], [6], [7]]\n",
      "array6 shape: (8, 1)\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(8)\n",
    "array3d = array1.reshape(2, 2, 2)\n",
    "print('array3d: \\n', array3d.tolist())\n",
    "print('array3d: ', array3d.shape)\n",
    "\n",
    "print('\\n3차원 -> 2차원')\n",
    "\n",
    "# 3차원 ndarray를 2차원 ndarray로 변환\n",
    "array5 = array3d.reshape(-1, 1)\n",
    "print('array5: \\n', array5.tolist())\n",
    "print('array5 shape:', array5.shape)\n",
    "\n",
    "print('\\n1차원 -> 2차원')\n",
    "\n",
    "# 1차원 ndarray를 2차원 ndarray로 변환\n",
    "array6 = array1.reshape(-1, 1)\n",
    "print('array6: \\n', array6.tolist())\n",
    "print('array6 shape:', array6.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e4e879e",
   "metadata": {},
   "source": [
    "# Numpy의 ndarray의 데이터 세트 선택 - 인덱싱(indexing)\n",
    "### 종류\n",
    "* 특정한 데이터만 추출: 원하는 위치의 인덱스 값을 지정하면 해당 위치의 데이터 반환\n",
    "* 슬라이싱(Slicing): 연속된 인덱스상의 ndarray를 추출하는 방식\n",
    "* 팬시 인덱싱(Fancy Indexing): 일정한 인덱싱 집합을 리스트 또는 ndarray 형태로 지정해 해당 위치에 있는 데이터의 ndarray를 반환\n",
    "* 불린 인덱싱(Boolean Indexing) : 특정 조건에 해당하는지 여부인 True/False 값 인덱싱 집합을 기반으로 True 에 해당하는 인덱스 위치에 있는 데이터의 ndarray를 반환"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33714950",
   "metadata": {},
   "source": [
    "# 단일 값 추출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "07aca0b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1: [1 2 3 4 5 6 7 8 9]\n",
      "value: 3\n",
      "<class 'numpy.int32'>\n",
      "array1[9]:  9\n",
      "array1[-1]:  9\n",
      "array1: [9 2 3 4 5 6 7 8 0]\n",
      "-------다차원 ndarray에서 단일 값 추출-------\n",
      "array2d : \n",
      " [[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "[0, 0] index 가리키는 값: 1\n",
      "[0, 1] index 가리키는 값: 2\n",
      "[1, 0] index 가리키는 값: 4\n",
      "[2, 2] index 가리키는 값: 9\n"
     ]
    }
   ],
   "source": [
    "# 1부터 9까지의 1차원 ndarray 생성\n",
    "array1 = np.arange(1, 10)\n",
    "print('array1:', array1)\n",
    "\n",
    "# index는 0부터 시작\n",
    "# 3번째 index 위치의 데이터 값 = array1[2]\n",
    "value = array1[2]\n",
    "print('value:', value)\n",
    "print(type(value))\n",
    "\n",
    "# 인덱스 -1 은 맨 뒤의 데이터 값을 의미 => array1[8] = array1[-1]\n",
    "print('array1[9]: ', array1[8])\n",
    "print('array1[-1]: ', array1[-1])\n",
    "\n",
    "# ndarray 내의 데이터값 수정\n",
    "array1[0] = 9    # array1[0] 값을 9로 수정\n",
    "array1[8] = 0    # array1[8] 값을 0로 수정\n",
    "print('array1:', array1)\n",
    "\n",
    "print('-------다차원 ndarray에서 단일 값 추출-------')\n",
    "\n",
    "array1d = np.arange(1, 10)\n",
    "array2d = array1d.reshape(3, 3)\n",
    "print('array2d : \\n', array2d)\n",
    "\n",
    "print('[0, 0] index 가리키는 값:', array2d[0, 0])\n",
    "print('[0, 1] index 가리키는 값:', array2d[0, 1])\n",
    "print('[1, 0] index 가리키는 값:', array2d[1, 0])\n",
    "print('[2, 2] index 가리키는 값:', array2d[2, 2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9fbe59e",
   "metadata": {},
   "source": [
    "# 슬라이싱(Slicing)\n",
    "* ':' 기호를 이용해 연속한 데이터를 슬라이싱해서 추출\n",
    "* 단일 데이터 값 추출을 제외하고 슬라이싱, 팬시 인덱싱, 불린 인덱싱은 ndarray 타입\n",
    "* ':' 사이에 시작 인덱스와 종료 인덱스를 표시하면, 시작 인덱스에서 종료 인덱스 -1의 위치에 있는 데이터의 ndarray를 반환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "488cdccb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5 6 7 8 9]\n",
      "[1 2 3]\n",
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(1, 10)\n",
    "array3 = array1[0:3]\n",
    "print(array1)\n",
    "print(array3)\n",
    "print(type(array3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "724e9750",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1:  [1 2 3 4 5 6 7 8 9]\n",
      "array1.shape:  (9,)\n",
      "array4:  [1 2 3]\n",
      "array5:  [4 5 6 7 8 9]\n",
      "array6:  [1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(1, 10)\n",
    "print('array1: ', array1)\n",
    "print('array1.shape: ', array1.shape)\n",
    "\n",
    "# [:3] : 0(처음 인덱스) <= x < 3\n",
    "array4 = array1[:3]\n",
    "print('array4: ', array4)\n",
    "\n",
    "# [3:] : 3 <= x < 8(마지막 인덱스)\n",
    "array5 = array1[3:]\n",
    "print('array5: ', array5)\n",
    "\n",
    "# [:] : 0(처음 인덱스) <= x < 8(마지막 인덱스)\n",
    "array6 = array1[:]\n",
    "print('array6: ', array6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5fb27273",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array2d: \n",
      " [[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "array2d[0:2, 0:2] \n",
      " [[1 2]\n",
      " [4 5]]\n",
      "array2d[1:3, 0:3] \n",
      " [[4 5 6]\n",
      " [7 8 9]]\n",
      "array2d[1:3, :] \n",
      " [[4 5 6]\n",
      " [7 8 9]]\n",
      "array2d[:, :] \n",
      " [[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "array2d[:2, 1:] \n",
      " [[2 3]\n",
      " [5 6]]\n",
      "array2d[:2, 0] \n",
      " [1 4]\n"
     ]
    }
   ],
   "source": [
    "array1d = np.arange(1, 10)\n",
    "array2d = array1d.reshape(3, 3)\n",
    "print('array2d: \\n', array2d)\n",
    "\n",
    "print('array2d[0:2, 0:2] \\n', array2d[0:2, 0:2])\n",
    "print('array2d[1:3, 0:3] \\n', array2d[1:3, 0:3])\n",
    "print('array2d[1:3, :] \\n', array2d[1:3, :])\n",
    "print('array2d[:, :] \\n', array2d[:, :])\n",
    "print('array2d[:2, 1:] \\n', array2d[:2, 1:])\n",
    "print('array2d[:2, 0] \\n', array2d[:2, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6b1df5f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array2d[0] : \n",
      "  [1 2 3]\n",
      "array2d[1] : \n",
      "  [4 5 6]\n",
      "array2d[0] shape:  (3,) array2d[1] shape:  (3,)\n"
     ]
    }
   ],
   "source": [
    "print('array2d[0] : \\n ', array2d[0])\n",
    "print('array2d[1] : \\n ', array2d[1])\n",
    "print('array2d[0] shape: ', array2d[0].shape, 'array2d[1] shape: ', array2d[1].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d4ed34",
   "metadata": {},
   "source": [
    "# 팬시 인덱싱(Fancy Indexing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c5529f4a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array2d[[0, 1], 2] =>  [3, 6]\n",
      "array2d[[0, 1], 0:2] =>  [[1, 2], [4, 5]]\n",
      "array2d[[0, 1]] =>  [[1, 2, 3], [4, 5, 6]]\n"
     ]
    }
   ],
   "source": [
    "array1d = np.arange(1, 10)\n",
    "array2d = array1d.reshape(3, 3)\n",
    "\n",
    "array3 = array2d[[0, 1], 2]\n",
    "print('array2d[[0, 1], 2] => ', array3.tolist())\n",
    "\n",
    "array4 = array2d[[0, 1], 0:2]\n",
    "print('array2d[[0, 1], 0:2] => ', array4.tolist())\n",
    "\n",
    "array5 = array2d[[0, 1]]\n",
    "print('array2d[[0, 1]] => ', array5.tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18e3bcde",
   "metadata": {},
   "source": [
    "# 불린 인덱싱(Boolean Indexing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "36663fd7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1d > 5 : [False False False False False  True  True  True  True]\n",
      "array1d > 5 불린 인덱싱 결과 값 :  [6 7 8 9]\n",
      "불린 인덱스로 필터링 결과:  [6 7 8 9]\n",
      "일반 인덱스로 필터링 결과 :  [6 7 8]\n"
     ]
    }
   ],
   "source": [
    "array1d = np.arange(1, 10)\n",
    "\n",
    "# array1d > 5 조건에 따른 결과 확인\n",
    "print('array1d > 5 :', array1d > 5)\n",
    "\n",
    "# [ ] 안에 array1d > 5 Boolean indexing을 적용\n",
    "array3 = array1d[array1d > 5]\n",
    "print('array1d > 5 불린 인덱싱 결과 값 : ', array3)\n",
    "\n",
    "# boolean_indexs 로 필터링 \n",
    "boolean_indexs = np.array([False, False, False, False, False, True, True, True, True])\n",
    "array4 = array1d[boolean_indexs]\n",
    "print('불린 인덱스로 필터링 결과: ', array4)\n",
    "\n",
    "# index 로 필터링\n",
    "indexs = np.array([5, 6, 7])\n",
    "array5 = array1d[indexs]\n",
    "print('일반 인덱스로 필터링 결과 : ', array5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c21d8cc",
   "metadata": {},
   "source": [
    "# 행렬의 정렬 - sort(), argsort()\n",
    "##### np.sort()\n",
    "##### ndarray.sort()\n",
    "* np.sort()는 정렬된 행렬을 반환, ndarray.sort()는 반환 값 None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "54d986c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "원본 행렬:  [3 1 9 5]\n",
      "np.sort() 호출 후 반환된 정렬 행렬:  [1 3 5 9]\n",
      "np.sort() 호출 후 원본 행렬:  [3 1 9 5]\n",
      "org_array.sort() 호출 후 반환된 행렬:  None\n",
      "org_array.sort() 호출 후 원본 행렬:  [1 3 5 9]\n",
      "내림차순으로 정렬:  [9 5 3 1]\n"
     ]
    }
   ],
   "source": [
    "org_array = np.array([3, 1, 9, 5])\n",
    "print('원본 행렬: ', org_array)\n",
    "\n",
    "# np.sort() 로 정렬\n",
    "sort_array1 = np.sort(org_array)\n",
    "print('np.sort() 호출 후 반환된 정렬 행렬: ', sort_array1)\n",
    "print('np.sort() 호출 후 원본 행렬: ', org_array)\n",
    "\n",
    "# ndarray.sort()로 정렬\n",
    "sort_array2 = org_array.sort()\n",
    "print('org_array.sort() 호출 후 반환된 행렬: ', sort_array2)\n",
    "print('org_array.sort() 호출 후 원본 행렬: ', org_array)\n",
    "\n",
    "# np.sort(), ndarray.sort() - 오름 차순 \n",
    "# 내림차순\n",
    "sort_array_desc = np.sort(org_array)[::-1]\n",
    "print('내림차순으로 정렬: ', sort_array_desc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4198667d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "원본 행렬: \n",
      " [[ 8 12]\n",
      " [ 7  1]]\n",
      "로우 방향으로 정렬: \n",
      " [[ 7  1]\n",
      " [ 8 12]]\n",
      "컬럼 방향으로 정렬: \n",
      " [[ 8 12]\n",
      " [ 1  7]]\n"
     ]
    }
   ],
   "source": [
    "array2d = np.array([[8, 12],\n",
    "                    [7, 1]])\n",
    "\n",
    "print('원본 행렬: \\n', array2d)\n",
    "\n",
    "sort_array2d_axis0 = np.sort(array2d, axis=0)\n",
    "print('로우 방향으로 정렬: \\n', sort_array2d_axis0)\n",
    "\n",
    "sort_array2d_axis1 = np.sort(array2d, axis=1)\n",
    "print('컬럼 방향으로 정렬: \\n', sort_array2d_axis1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84b6e01e",
   "metadata": {},
   "source": [
    "# 정렬된 행렬의 인덱스를 반환\n",
    "### np.argsort()는 정렬 행렬의 원본 행렬 인덱스를 ndarray 형으로 반환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cb7ffa45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "행렬 정렬 시 원본 행렬의 인덱스:  [1 0 3 2]\n",
      "행렬 내림차순 정렬 시 원본 행렬의 인덱스:  [2 3 0 1]\n"
     ]
    }
   ],
   "source": [
    "org_array = np.array([3, 1, 9, 5])\n",
    "sort_indices = np.argsort(org_array)\n",
    "print(type(sort_indices))\n",
    "print('행렬 정렬 시 원본 행렬의 인덱스: ', sort_indices)\n",
    "\n",
    "sort_indices_desc = np.argsort(org_array)[::-1]\n",
    "print('행렬 내림차순 정렬 시 원본 행렬의 인덱스: ', sort_indices_desc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ff946a",
   "metadata": {},
   "source": [
    "### np.argsort() 활용\n",
    "\n",
    "### ex) 시험 성적 순으로 학생 이름 출력 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "40bc4fef",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "성적 오름차순 정렬 시 score_array의 인덱스:  [0 2 4 1 3]\n",
      "성적 오름차순으로 name_array의 이름 출력:  ['John' 'Sarah' 'Samuel' 'Mike' 'Kate']\n"
     ]
    }
   ],
   "source": [
    "name_array = np.array(['John', 'Mike', 'Sarah', 'Kate', 'Samuel'])\n",
    "score_array = np.array([78, 95, 84, 98, 88])\n",
    "\n",
    "sort_indices_asc = np.argsort(score_array)\n",
    "print('성적 오름차순 정렬 시 score_array의 인덱스: ', sort_indices_asc)\n",
    "print('성적 오름차순으로 name_array의 이름 출력: ', name_array[sort_indices_asc])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "674b5d01",
   "metadata": {},
   "source": [
    "# 선형대수 연산 - 행렬 내적과 전치 행렬 구하기"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12cf5beb",
   "metadata": {},
   "source": [
    "### 행렬 내적(행렬 곱)\n",
    "* np.dot()\n",
    "* A@B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "54a8eefe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행렬 내적 결과: \n",
      " [[ 58  64]\n",
      " [139 154]]\n",
      "@ 연산: \n",
      " [[ 58  64]\n",
      " [139 154]]\n"
     ]
    }
   ],
   "source": [
    "A = np.array([[1, 2, 3],\n",
    "             [4, 5, 6]])\n",
    "B = np.array([[7, 8],\n",
    "              [9, 10],\n",
    "              [11, 12]])\n",
    "\n",
    "dot_product = np.dot(A, B)\n",
    "print('행렬 내적 결과: \\n', dot_product)\n",
    "\n",
    "print('@ 연산: \\n', A@B)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1afb47a4",
   "metadata": {},
   "source": [
    "### 전치 행렬\n",
    "* np.transpose()\n",
    "* np.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1fc1d3ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A의 전치 행렬: \n",
      " [[1 3]\n",
      " [2 4]]\n",
      "matrix.T 를 통한 전치 행렬: \n",
      " [[1 3]\n",
      " [2 4]]\n"
     ]
    }
   ],
   "source": [
    "A = np.array([[1, 2],\n",
    "              [3, 4]])\n",
    "transpose_mat = np.transpose(A)\n",
    "print('A의 전치 행렬: \\n', transpose_mat)\n",
    "print('matrix.T 를 통한 전치 행렬: \\n', A.T)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
